generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int    @id @default(autoincrement())
  username    String @unique
  phonenumber String
  password    String
  rolename    String
  roleId      Int
  role        Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@index([roleId], map: "User_roleId_fkey")
}

model Role {
  id         Int         @id @default(autoincrement())
  name       String
  previliges Privilege[]
  users      User[]
}

model Department {
  id              Int    @id @default(autoincrement())
  name            String
  doctor          String
  doctorSignature String
  tests           Test[]
}

model Test {
  id               Int         @id @default(autoincrement())
  name             String
  testcode         String?
  departmentId     Int?
  departmentName   String?
  sampletype       String?
  container        String?
  samplesize       String?
  sampleunit       String?
  reportwithin     String?
  reportwithinType String?
  testmethodtype   String?
  regularprice     Int         @default(0)
  note             String?     @db.VarChar(2000)
  orderTest        OrderTest[]
  pricelist        PriceList[]
  referencesValues Reference[]
  department       Department? @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  package          Package[]   @relation("PackageToTest")
  profile          Profile[]   @relation("ProfileToTest")
  formulas         Formulas[]
  headings          Headings[]

  @@index([departmentId], map: "Test_departmentId_fkey")
}

model Profile {
  id               Int            @id @default(autoincrement())
  name             String
  testcode         String?
  testnames        String?
  sampletype       String?
  sampleunit       String?
  container        String?
  samplesize       String?
  reportwithin     String?
  reportwithinType String?
  regularprice     Int            @default(0)
  note             String?         @db.VarChar(2000)
  pricelist        PriceList[]
  package          Package[]      @relation("PackageToProfile")
  test             Test[]         @relation("ProfileToTest")
  formulas         Formulas[]
  orderprofile     OrderProfile[]
  headings          Headings[]
}

model Headings {
  id       Int    @id @default(autoincrement())
  heading  String
  tests    Test[]
  profileId  Int
  order      Int  @default(0)
  profile Profile @relation(fields: [profileId], references: [id])
}

model Formulas {
  id             Int         @id @default(autoincrement())
  firsttest      String?
  firstoperator  String?
  secondtest     String?
  secondoperator String?
  thirdtest      String?
  profileId      Int
  testId         Int
  references     Reference[]
  test           Test        @relation(fields: [testId], references: [id], onDelete: Cascade)
  profile        Profile     @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Package {
  id               Int         @id @default(autoincrement())
  name             String
  sampletype       String?
  container        String?
  samplesize       String?
  sampleunit       String?
  reportwithin     String?
  reportwithinType String?
  regularprice     Int         @default(0)
  note             String?      @db.VarChar(2000)
  pricelist        PriceList[]
  profile          Profile[]   @relation("PackageToProfile")
  test             Test[]      @relation("PackageToTest")
}

model PriceList {
  id           Int      @id @default(autoincrement())
  label        String
  price        Int      @default(0)
  profileprice Int      @default(0)
  packageprice Int      @default(0)
  testId       Int?
  profileId    Int?
  packageId    Int?
  package      Package? @relation(fields: [packageId], references: [id], onDelete: Cascade)
  profile      Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)
  test         Test?    @relation(fields: [testId], references: [id], onDelete: Cascade)

  @@index([packageId], map: "PriceList_packageId_fkey")
  @@index([profileId], map: "PriceList_profileId_fkey")
  @@index([testId], map: "PriceList_testId_fkey")
}

model Reference {
  id            Int       @id @default(autoincrement())
  gender        String
  minAge        Int
  maxAge        Int
  lowerValue    Float
  upperValue    Float
  unit          String
  note          String?  @db.VarChar(200)
  testId        Int
  test          Test      @relation(fields: [testId], references: [id], onDelete: Cascade)
  formulatestId Int?
  formulatest   Formulas? @relation(fields: [formulatestId], references: [id], onDelete: Cascade)

  @@index([testId], map: "Reference_testId_fkey")
}

model RefLab {
  id                   Int     @id @default(autoincrement())
  diagonsticname       String
  phonenumber          String
  emailId              String
  address              String?
  autoselectpricelist  String
  autoreportsendmode   String
  autoreporttype       Boolean
  reporttype           String?
  customisedletterhead Boolean
  letterhead           String?
  orders               Order[]
}

model RefDoctor {
  id                   Int     @id @default(autoincrement())
  doctorname           String
  specialisation       String?
  phonenumber          String
  emailId              String
  percentage           Int
  autoselectpricelist  String
  autoreportsendmode   String
  autoreporttype       Boolean
  reporttype           String?
  customisedletterhead Boolean
  letterhead           String?
  orders               Order[]
}

model Order {
  id             Int            @id @default(autoincrement())
  orderDate      DateTime       @default(now())
  patientId      Int
  doctorId       Int?
  labId          Int?
  totalamount    Int
  discount       Int
  discountType   String?
  netamount      Int
  paymentmethod  String
  paidamount     Int
  balanceamount  Int
  remarks        String?
  bill           String?
  orderstatus    String         @default("Registered")
  collectiontime DateTime?
  processtime    DateTime?
  reporttime     DateTime?
 
  doctor         RefDoctor?     @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  lab            RefLab?        @relation(fields: [labId], references: [id], onDelete: Cascade)
  patient        Patient        @relation(fields: [patientId], references: [id], onDelete: Cascade)
  packages       OrderPackage[]
  profiles       OrderProfile[]
  tests          OrderTest[]


  @@index([doctorId], map: "Order_doctorId_fkey")
  @@index([labId], map: "Order_labId_fkey")
  @@index([patientId], map: "Order_patientId_fkey")
}

model OrderTestHeadings {
  id       Int    @id @default(autoincrement())
  heading String
  profileId Int
 order     Int  @default(0)
  tests    OrderTest[]
  profile OrderProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model OrderProfile {
  id           Int           @id @default(autoincrement())
  orderId      Int?
  packageId    Int?
  name         String
  sampletype   String?
  samplesize   String?
  sampleunit   String?
  reportwithin String?
  price        Int?
  note         String?
  profileId    Int?
  profile      Profile?      @relation(fields: [profileId], references: [id])
  order        Order?        @relation(fields: [orderId], references: [id], onDelete: Cascade)
  package      OrderPackage? @relation(fields: [packageId], references: [id], onDelete: Cascade)
  tests        OrderTest[]
  headings     OrderTestHeadings[]

  @@index([orderId], map: "OrderProfile_orderId_fkey")
  @@index([packageId], map: "OrderProfile_packageId_fkey")
}



model OrderPackage {
  id           Int            @id @default(autoincrement())
  orderId      Int?
  name         String
  sampletype   String?
  samplesize   String?
  sampleunit   String?
  reportwithin String?
  price        Int?
  note         String?
  order        Order?         @relation(fields: [orderId], references: [id])
  profiles     OrderProfile[]
  tests        OrderTest[]

  @@index([orderId], map: "OrderPackage_orderId_fkey")
}

model OrderTest {
  id             Int           @id @default(autoincrement())
  orderId        Int?
  name           String
  sampletype     String?
  samplesize     String?
  sampleunit     String?
  reportwithin   String?
  price          Int
  note           String?
  highlight      String?
  bold           Boolean     @default(false)
  observedValue  Float?
  testId         Int
  profileId      Int?
  packageId      Int?
  testmethodtype String?
   headingId      Int?
  heading         OrderTestHeadings? @relation(fields: [headingId], references: [id], onDelete: Cascade)
  order          Order?        @relation(fields: [orderId], references: [id], onDelete: Cascade)
  package        OrderPackage? @relation(fields: [packageId], references: [id], onDelete: Cascade)
  profile        OrderProfile? @relation(fields: [profileId], references: [id], onDelete: Cascade)
  test           Test          @relation(fields: [testId], references: [id])

  @@index([orderId], map: "OrderTest_orderId_fkey")
  @@index([packageId], map: "OrderTest_packageId_fkey")
  @@index([profileId], map: "OrderTest_profileId_fkey")
  @@index([testId], map: "OrderTest_testId_fkey")
}

model Patient {
  id             Int     @id @default(autoincrement())
  name           String
  nameprefix     String?
  identityNumber String?
  identityType   String?
  gender         String
  phonenumber    String
  emailId        String
  age            Int
  agesuffix      String?
  address        String?
  orders         Order[]
}

model Privilege {
  id     Int    @id @default(autoincrement())
  name   String
  roleId Int
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@index([roleId], map: "Privilege_roleId_fkey")
}
